<div class="inner-content-wrapper">
	<div class="main-content">
		<div class="container wrapper">
			<h1><i class="fa fa-unlock-alt"></i> Moderation Panel <small>{{{userData.urlChannel}}}</small></h1>
			<p>This page is designed so your mods can manage your music queue, without spamming chat with a bunch of messages!</p>
			<div class="moderation-messages"></div>
			<div class="control-buttons moderation">
				<div class="volumeContainer clearfix">
					<div class="slider">
						<div class="linktoshare">
							<span>Link To Share: </span>
							<input type="text" readonly="readonly" value="" class="linktoshareinput darkinput" />
						</div>
						<input type="range" id="volumeRange" value="{{currentVolume}}" max="100" min="0" step="5" onchange="updateRangeVolume(this.value)" />
						<input type="text" name="volumeInput" id="volumeInput" class="currentvolume darkinput" disabled />
					</div>
					<div class="buttons">
						{{> player-buttons}}
					</div>
				</div>
			</div>
			<div class="song-container">
					<table class="datatable moderation">
						<thead>
							<th class="moderation-number">#</th>
							<th class="datatable-half">Title</th>
							<th>Requested</th>
							<th width="80"></th>
						</thead>
						<tbody>{{{formattedSonglist}}}</tbody>
					</table>
					<div class="nosongs"></div>
			</div>
			<div class="chatbox"></div>
			<div class="details">
				<div class="messagesFromBot clear"></div>
			</div>
		</div>
	</div>
</div>
<script src="https://ttv-api.s3.amazonaws.com/twitch.min.js"></script>
<script>
	$(document).ready(function() {
		if (readCookie(page)) {
			dataTableStartSize = readCookie(page);
		} else {
			dataTableStartSize = '25';
		}
		buildDataTable('.datatable', dataTableStartSize);
	});

	async function initModeration() {
		const currentVolume = '{{currentVolume}}';

		$('#volumeInput,#volumeRange').val(currentVolume);
		$("#volumeRange").mousemove(function () {
			$("#volumeInput").val($("#volumeRange").val());
		});

		loadTwitchChatIframe($('.urlChannel').text());
		handleVolumeClick($('.volBtn'), '{{userData.urlChannel}}');
		handlePlayPauseClick($('.togglePlay'), '{{userData.urlChannel}}');
		handleSkipClick($('.skipBtn'), '{{userData.urlChannel}}');
	};

	function loadTwitchChatIframe(channelName) {
		if (channelName.includes('#')) {channelName = channelName.slice(1);};
		const chatPanel = '<iframe frameborder="0" scrolling="no" id="chat_embed" src="http://www.twitch.tv/' + channelName + '/chat"></iframe>';
		$('.chatbox').html(chatPanel);
	};

	async function updateRangeVolume(newVol) {
		await updateVolume($('.urlChannel').text(), newVol);
	};

	$('body').on('click', '.removeButton', async function(e) {
		const removeSongData = await removeSong($(this).attr('id'), $('.urlChannel').text());
		if (removeSongData !== 'song removed') {
			$('.messagesFromBot').html('<p>There was an error removing that song, please try again!</p>').fadeIn('fast');
			setTimeout(function(){
				$('.messagesFromBot').fadeOut("slow");
			},2000);
		};
	});

	$('body').on('click', '.promoteButton', async function(e) {
		const promoteSongData = await promoteSong($(this).attr('id'), $('.urlChannel').text());
		if (promoteSongData != 'song promoted') {
			$('.messagesFromBot').html('<p>There was an error promoting that song, please try again!</p>').fadeIn('fast');
			setTimeout(function(){
				$('.messagesFromBot').fadeOut("slow");
			},2000);
		};
	});

	initModeration();
</script>